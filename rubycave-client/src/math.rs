macro_rules! im3 {
    ($row:tt $column:tt) => {
        ($row) * 3 + ($column)
    };
}

macro_rules! im4 {
    ($row:tt $column:tt) => {
        ($row) * 4 + ($column)
    };
}

#[rustfmt::skip]
pub fn id_mat4() -> [f32; 16] {
    [
        1.0, 0.0, 0.0, 0.0,
        0.0, 1.0, 0.0, 0.0,
        0.0, 0.0, 1.0, 0.0,
        0.0, 0.0, 0.0, 1.0,
    ]
}

#[rustfmt::skip]
pub fn inv_mat3(mat: [f32; 9]) -> [f32; 9] {
    [
        1.0 / mat[im3!(0 0)], 1.0 / mat[im3!(0 1)], 1.0 / mat[im3!(0 2)],
        1.0 / mat[im3!(1 0)], 1.0 / mat[im3!(1 1)], 1.0 / mat[im3!(1 2)],
        1.0 / mat[im3!(2 0)], 1.0 / mat[im3!(2 1)], 1.0 / mat[im3!(2 2)],
    ]
}

#[rustfmt::skip]
pub fn mul_mat3(a: [f32; 9], b: [f32; 9]) -> [f32; 9] {
    [
        a[im3!(0 0)] * b[im3!(0 0)] + a[im3!(0 1)] * b[im3!(1 0)] + a[im3!(2 0)] * b[im3!(2 0)],
        a[im3!(0 0)] * b[im3!(0 1)] + a[im3!(0 1)] * b[im3!(1 1)] + a[im3!(2 0)] * b[im3!(2 1)],
        a[im3!(0 0)] * b[im3!(0 2)] + a[im3!(0 1)] * b[im3!(1 2)] + a[im3!(2 0)] * b[im3!(2 2)],

        a[im3!(1 0)] * b[im3!(0 0)] + a[im3!(1 1)] * b[im3!(1 0)] + a[im3!(2 1)] * b[im3!(2 0)],
        a[im3!(1 0)] * b[im3!(0 1)] + a[im3!(1 1)] * b[im3!(1 1)] + a[im3!(2 1)] * b[im3!(2 1)],
        a[im3!(1 0)] * b[im3!(0 2)] + a[im3!(1 1)] * b[im3!(1 2)] + a[im3!(2 1)] * b[im3!(2 2)],

        a[im3!(2 0)] * b[im3!(0 0)] + a[im3!(2 1)] * b[im3!(1 0)] + a[im3!(2 2)] * b[im3!(2 0)],
        a[im3!(2 0)] * b[im3!(0 1)] + a[im3!(2 1)] * b[im3!(1 1)] + a[im3!(2 2)] * b[im3!(2 1)],
        a[im3!(2 0)] * b[im3!(0 2)] + a[im3!(2 1)] * b[im3!(1 2)] + a[im3!(2 2)] * b[im3!(2 2)],
    ]
}

#[rustfmt::skip]
pub fn mul_mat4(a: [f32; 16], b: [f32; 16]) -> [f32; 16] {
    [
        a[im4!(0 0)] * b[im4!(0 0)] + a[im4!(0 1)] * b[im4!(1 0)] + a[im4!(2 0)] * b[im4!(2 0)] + a[im4!(3 0)] * b[im4!(3 0)],
        a[im4!(0 0)] * b[im4!(0 1)] + a[im4!(0 1)] * b[im4!(1 1)] + a[im4!(2 0)] * b[im4!(2 1)] + a[im4!(3 0)] * b[im4!(3 1)],
        a[im4!(0 0)] * b[im4!(0 2)] + a[im4!(0 1)] * b[im4!(1 2)] + a[im4!(2 0)] * b[im4!(2 2)] + a[im4!(3 0)] * b[im4!(3 2)],
        a[im4!(0 0)] * b[im4!(0 3)] + a[im4!(0 1)] * b[im4!(1 3)] + a[im4!(2 0)] * b[im4!(2 3)] + a[im4!(3 0)] * b[im4!(3 3)],

        a[im4!(1 0)] * b[im4!(0 0)] + a[im4!(1 1)] * b[im4!(1 0)] + a[im4!(2 1)] * b[im4!(2 0)] + a[im4!(3 1)] * b[im4!(3 0)],
        a[im4!(1 0)] * b[im4!(0 1)] + a[im4!(1 1)] * b[im4!(1 1)] + a[im4!(2 1)] * b[im4!(2 1)] + a[im4!(3 1)] * b[im4!(3 1)],
        a[im4!(1 0)] * b[im4!(0 2)] + a[im4!(1 1)] * b[im4!(1 2)] + a[im4!(2 1)] * b[im4!(2 2)] + a[im4!(3 1)] * b[im4!(3 2)],
        a[im4!(1 0)] * b[im4!(0 3)] + a[im4!(1 1)] * b[im4!(1 3)] + a[im4!(2 1)] * b[im4!(2 3)] + a[im4!(3 1)] * b[im4!(3 3)],

        a[im4!(2 0)] * b[im4!(0 0)] + a[im4!(2 1)] * b[im4!(1 0)] + a[im4!(2 2)] * b[im4!(2 0)] + a[im4!(3 2)] * b[im4!(3 0)],
        a[im4!(2 0)] * b[im4!(0 1)] + a[im4!(2 1)] * b[im4!(1 1)] + a[im4!(2 2)] * b[im4!(2 1)] + a[im4!(3 2)] * b[im4!(3 1)],
        a[im4!(2 0)] * b[im4!(0 2)] + a[im4!(2 1)] * b[im4!(1 2)] + a[im4!(2 2)] * b[im4!(2 2)] + a[im4!(3 2)] * b[im4!(3 2)],
        a[im4!(2 0)] * b[im4!(0 3)] + a[im4!(2 1)] * b[im4!(1 3)] + a[im4!(2 2)] * b[im4!(2 3)] + a[im4!(3 2)] * b[im4!(3 3)],

        a[im4!(3 0)] * b[im4!(0 0)] + a[im4!(3 1)] * b[im4!(1 0)] + a[im4!(2 3)] * b[im4!(2 0)] + a[im4!(3 3)] * b[im4!(3 0)],
        a[im4!(3 0)] * b[im4!(0 1)] + a[im4!(3 1)] * b[im4!(1 1)] + a[im4!(2 3)] * b[im4!(2 1)] + a[im4!(3 3)] * b[im4!(3 1)],
        a[im4!(3 0)] * b[im4!(0 2)] + a[im4!(3 1)] * b[im4!(1 2)] + a[im4!(2 3)] * b[im4!(2 2)] + a[im4!(3 3)] * b[im4!(3 2)],
        a[im4!(3 0)] * b[im4!(0 3)] + a[im4!(3 1)] * b[im4!(1 3)] + a[im4!(2 3)] * b[im4!(2 3)] + a[im4!(3 3)] * b[im4!(3 3)],
    ]
}

#[rustfmt::skip]
pub fn mat3_to_mat4(mat: [f32; 9]) -> [f32; 16] {
    [
        mat[im3!(0 0)], mat[im3!(0 1)], mat[im3!(0 2)], 0.0,
        mat[im3!(1 0)], mat[im3!(1 1)], mat[im3!(1 2)], 0.0,
        mat[im3!(2 0)], mat[im3!(2 1)], mat[im3!(2 2)], 0.0,
        0.0, 0.0, 0.0, 1.0
    ]
}
